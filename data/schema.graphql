schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

scalar UUID

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  users_connection(
    where: users_bool_exp
    first: Int
    after: String
    last: Int
    before: String
  ): UsersConnection!
  users_aggregate(
    where: users_bool_exp
    order_by: [users_order_by!]
    limit: Int
    offset: Int
    distinct_on: [users_select_column!]
  ): users_aggregate!
  users(
    where: users_bool_exp
    order_by: [users_order_by!]
    limit: Int
    offset: Int
    distinct_on: [users_select_column!]
  ): [users!]!
  users_by_pk(id: UUID!): users
}

type Mutation {
  delete_users(where: users_bool_exp!): users_mutation_response
  delete_users_by_pk(id: UUID!): users
  insert_users_one(object: users_insert_input!, on_conflict: users_on_conflict): users
  insert_users(objects: [users_insert_input!]!, on_conflict: users_on_conflict): users_mutation_response
  update_users(_set: users_set_input, where: users_bool_exp!): users_mutation_response
  update_users_many(updates: [users_updates!]!): [users_mutation_response]
  update_users_by_pk(_set: users_set_input, pk_columns: users_pk_columns_input!): users
}

type Subscription {
  users_connection(
    where: users_bool_exp
    first: Int
    after: String
    last: Int
    before: String
  ): UsersConnection!
  users_aggregate(
    where: users_bool_exp
    order_by: [users_order_by!]
    limit: Int
    offset: Int
    distinct_on: [users_select_column!]
  ): users_aggregate!
  users_stream(
    where: users_bool_exp
    cursor: [users_stream_cursor_input]!
    batch_size: Int!
  ): [users!]!
  users(
    where: users_bool_exp
    order_by: [users_order_by!]
    limit: Int
    offset: Int
    distinct_on: [users_select_column!]
  ): [users!]!
  users_by_pk(id: UUID!): users
}

type users implements Node {
  id: ID!
  email: String
  password: String
  username: String
}

type UsersEdge {
  node: users!
  cursor: String!
}

type UsersConnection {
  edges: [UsersEdge!]!
  pageInfo: PageInfo!
}

type users_aggregate_fields {
  count(distinct: Boolean, columns: [users_select_column!]): Int!
  max: users_max_fields
  min: users_min_fields
}

type users_max_fields {
  email: String
  id: UUID
  password: String
  username: String
}

type users_min_fields {
  email: String
  id: UUID
  password: String
  username: String
}

type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

type users_mutation_response {
  returning: [users!]!
  affected_rows: Int!
}

input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  email: String_comparison_exp
  id: UUID_comparison_exp
  password: String_comparison_exp
  username: String_comparison_exp
}

input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _in: [String!]
  _is_null: Boolean
  _lt: String
  _lte: String
  _neq: String
  _nin: [String!]
  _niregex: String
  _nregex: String
  _nsimilar: String
  _nilike: String
  _nlike: String
  _iregex: String
  _regex: String
  _similar: String
  _ilike: String
  _like: String
}

input UUID_comparison_exp {
  _eq: UUID
  _gt: UUID
  _gte: UUID
  _in: [UUID!]
  _is_null: Boolean
  _lt: UUID
  _lte: UUID
  _neq: UUID
  _nin: [UUID!]
}

input users_order_by {
  email: order_by
  id: order_by
  password: order_by
  username: order_by
}

input users_stream_cursor_input {
  initial_value: users_stream_cursor_value_input!
  ordering: cursor_ordering
}

input users_stream_cursor_value_input {
  email: String
  id: UUID
  password: String
  username: String
}

input users_insert_input {
  email: String
  id: UUID
  password: String
  username: String
}

input users_set_input {
  email: String
  id: UUID
  password: String
  username: String
}

input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

input users_pk_columns_input {
  id: UUID!
}

input users_updates {
  where: users_bool_exp!
  _set: users_set_input
}

enum order_by {
  asc_nulls_first
  asc
  asc_nulls_last
  desc
  desc_nulls_first
  desc_nulls_last
}

enum cursor_ordering {
  ASC
  DESC
}

enum users_select_column {
  email
  id
  password
  username
}

enum users_constraint {
  users_pkey
}

enum users_update_column {
  email
  id
  password
  username
}